// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @map("name")
  username  String   @unique @map("username")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Feedback {
  id          String   @id @default(uuid())
  name        String   @map("name")
  description String   @map("description")
  rating      Float    @map("rating")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("feedbacks")
}

model Pajama {
  id          String  @id @default(uuid())
  name        String  @map("name")
  description String  @map("description")
  image       String  @map("image")
  price       Float   @map("price")
  season      String  @map("season")
  type        String  @map("type")
  gender      String  @map("gender")
  favorite    Boolean @default(false) @map("favorite")
  onSale      Boolean @default(false) @map("on_sale")
  salePercent Float?  @map("sale_percent") // Opcional com '?'

  sizes PajamaSize[]
  sales SalePajamas[]

  @@map("pajamas")
}

model PajamaSize {
  id            String @id @default(uuid())
  stockQuantity Int    @map("stock_quantity")
  size          String @map("size") // Ex: "PP", "P", "M", etc.

  pajama   Pajama @relation(fields: [pajamaId], references: [id], onDelete: Cascade)
  pajamaId String @map("pajama_id")

  @@map("pajama_sizes")
}

model Sale {
  id            String   @id @default(uuid())
  buyerName     String   @map("buyer_name")
  cpf           String   @map("cpf")
  price         Float    @map("price")
  paymentMethod String   @map("payment_method")
  installments  Int      @default(1) @map("installments")
  cardNumber    String?  @map("card_number") // Opcional com '?'
  createdAt     DateTime @default(now()) @map("created_at")

  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @map("address_id")

  pajamas SalePajamas[]

  @@map("sales")
}

// Tabela de junção para a relação N:N entre Sale e Pajama
model SalePajamas {
  quantity Int   @map("quantity")
  price    Float @map("price")

  sale     Sale   @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId   String @map("sale_id")
  pajama   Pajama @relation(fields: [pajamaId], references: [id], onDelete: Cascade)
  pajamaId String @map("pajama_id")

  @@id([saleId, pajamaId]) // Chave primária composta
  @@map("sale_pajamas")
}

model Address {
  id           String @id @default(uuid())
  zipCode      String @map("zip_code")
  state        String @map("state")
  city         String @map("city")
  neighborhood String @map("neighborhood")
  address      String @map("address")
  number       String @map("number")

  sales Sale[]

  @@map("addresses")
}
